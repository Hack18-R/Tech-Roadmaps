
### ✅ **1. Arrays & Strings**
#### **Operations:**
- Traversal / Iteration
- Insertion
- Deletion
- Searching (Linear/Binary)
- Sorting (Bubble, Selection, Insertion, Merge, Quick)
- Reversing
- Merging arrays
- Rotating array
- Finding duplicates
- Subarrays / Substrings
- Sliding window problems

---

### ✅ **2. Searching Algorithms**
#### **Operations:**
- Linear Search
- Binary Search (Iterative & Recursive)
- Search in rotated sorted array
- Search in 2D matrix
- Lower Bound / Upper Bound (Binary Search variation)

---

### ✅ **3. Sorting Algorithms**
#### **Operations:**
- Bubble Sort
- Selection Sort
- Insertion Sort
- Merge Sort
- Quick Sort
- Heap Sort
- Counting Sort
- Radix Sort
- Bucket Sort
- Sorting based on custom logic (comparator)

---

### ✅ **4. Stack**
#### **Operations:**
- Push
- Pop
- Peek / Top
- isEmpty
- isFull (if array-based)
- Get min/max in O(1) (advanced)
- Balanced parentheses
- Reverse a stack
- Implement stack using queue (and vice versa)

---

### ✅ **5. Queue**
#### **Operations:**
- Enqueue
- Dequeue
- Front / Rear
- isEmpty / isFull
- Circular Queue
- Deque (Double-Ended Queue)
- Priority Queue (Min/Max Heap)
- Queue using stacks (and vice versa)

---

### ✅ **6. Linked List**
#### **Operations:**
- Insertion (beginning, middle, end)
- Deletion (by position or value)
- Search
- Traversal
- Reverse a linked list (Iterative/Recursive)
- Detect & remove loop (Floyd’s cycle detection)
- Merge two sorted lists
- Middle of linked list
- Palindrome check
- Copy list with random pointers

---

### ✅ **7. Trees (Binary Tree / BST)**
#### **Operations:**
- Insertion / Deletion
- Traversal (Inorder, Preorder, Postorder, Level-order)
- Search (in BST)
- Height / Depth
- Diameter
- Lowest Common Ancestor (LCA)
- Mirror a tree
- Balanced tree check
- Convert Tree ↔ LinkedList or Array
- Binary Tree ↔ BST
- Build Tree from inorder/preorder/postorder

---

### ✅ **8. Graphs**
#### **Operations:**
- Add / Remove Vertex/Edge
- DFS (Depth-First Search)
- BFS (Breadth-First Search)
- Detect Cycle (Directed/Undirected)
- Topological Sort
- Shortest Path (Dijkstra, Bellman-Ford, Floyd-Warshall)
- Minimum Spanning Tree (Prim’s, Kruskal’s)
- Graph representation (Adjacency Matrix/List)
- Connected Components
- Bipartite Check

---

### ✅ **9. Divide & Conquer**
#### **Operations:**
- Divide input into smaller chunks
- Recursively solve chunks
- Merge solutions
- Examples:
  - Merge Sort
  - Quick Sort
  - Binary Search
  - Closest Pair of Points
  - Matrix Multiplication

---

### ✅ **10. Greedy Algorithms**
#### **Operations:**
- Sorting based on logic
- Choose optimal local option at each step
- Examples:
  - Activity selection
  - Fractional Knapsack
  - Huffman Encoding
  - Job Scheduling
  - Minimum Coins

---

### ✅ **11. Recursion & Backtracking**
#### **Operations:**
- Base condition / Recursive calls
- Explore all possible paths
- Prune/Backtrack when needed
- Examples:
  - N-Queens
  - Sudoku Solver
  - Permutations & Combinations
  - Subsets / Power Set
  - Maze problem
  - Word Search

---

### ✅ **12. Dynamic Programming (DP)**
#### **Operations:**
- Identify overlapping subproblems
- Memoization (Top-down)
- Tabulation (Bottom-up)
- State definition and transitions
- Examples:
  - Fibonacci (DP version)
  - 0/1 Knapsack
  - Longest Common Subsequence (LCS)
  - Longest Increasing Subsequence (LIS)
  - Matrix Chain Multiplication
  - DP on Trees, Grids, or Subsets
